<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>realX = x
realY = y
walking = 3
sliding = false
cooldown = 30
canFire = true
canSlide = true
maxAmmo = 12
ammo = maxAmmo
reloading = false
justEntered = false
inVent = false
hasPassword = false
hitboxRadius = 24
range = 32
windowX = window_get_width()
windowY = window_get_height()

randomize()
display_reset(0,true)
view_wport[0] = display_get_width()
view_hport[0] = display_get_height()

light_create(spr_lightspot,1,c_white,0.5,image_angle,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canSlide = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sliding = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walking = 3
obj_dialog_welcome.done = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>justEntered = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reloading = false
ammo = maxAmmo
canFire = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canFire = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Rotation:
if not sliding
{
    image_angle = point_direction(x, y, mouse_x, mouse_y)
    light_set_rotation(image_angle+90)
}

// Movement:
if sliding
{
    walking = 6
}
else if inVent or reloading
{
    walking = 2
}
else
{
    walking = 4
}

leftBlocked = collision_rectangle(x-hitboxRadius,y-16,x,y+16,obj_obstacle,false,true)
rightBlocked = collision_rectangle(x,y-16,x+hitboxRadius,y+16,obj_obstacle,false,true)
topBlocked = collision_rectangle(x-16,y-hitboxRadius,x+16,y,obj_obstacle,false,true)
bottomBlocked = collision_rectangle(x-16,y,x+16,y+hitboxRadius,obj_obstacle,false,true)

if keyboard_check(ord('A')) or keyboard_check(ord('D')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))
{
    if sliding
    {
        sprite_index = spr_playersliding
    }
    else
    {
        sprite_index = spr_playerwalking
    }
    if keyboard_check(ord('A')) and not leftBlocked
    {
        realX -= walking
        x = round(realX)
    }
    if keyboard_check(ord('D')) and not rightBlocked
    {
        realX += walking
        x = round(realX)
    }
    if keyboard_check(ord('W')) and not topBlocked
    {
        realY -= walking
        y = round(realY)
    }
    if keyboard_check(ord('S')) and not bottomBlocked
    {
        realY += walking
        y = round(realY)
    }
    if keyboard_check(vk_space) and canSlide and not inVent and not reloading
    {
        sliding = true
        alarm[4] = 20
        canSlide = false
        alarm[5] = 60
    }
}
else
{
    sprite_index = spr_player
}

// Shooting:
if mouse_check_button(mb_left) and canFire and ammo &gt; 0 and not reloading and not sliding
{
    bullet = instance_create(x,y,obj_bullet)
    bullet.direction = image_angle + random_range(-1,1)
    bullet.speed = 16
    ammo -= 1
    alarm[0] = cooldown
    canFire = false
    audio_play_sound(snd_pistol,1,false)
}

// Reloading:
if keyboard_check(ord('R')) and ammo != maxAmmo and not reloading and not sliding
{
    reloading = true
    canFire = false
    alarm[1] = 180
}

// Entering and leaving vents:
if collision_point(x,y,obj_table,false,true) and not justEntered
{
    if keyboard_check(ord('Q'))
    {
        justEntered = true
        room_goto(room+1)
        inVent = true
        alarm[2] = 10
    }
}
    
if collision_point(x,y,obj_ventopen,false,true) and not justEntered
{
    if keyboard_check(ord('Q'))
    {
        justEntered = true
        room_goto(room-1)
        inVent = false
        alarm[2] = 10
    }
}

// Moving between floors:
if collision_circle(x,y,range,obj_elevatorup,false,true) and not justEntered and keyboard_check(ord('Q'))
{
    room_goto(room+2)
    justEntered = true
    alarm[2] = 10
}

if collision_circle(x,y,range,obj_elevatordown,false,true) and not justEntered and keyboard_check(ord('Q'))
{
    room_goto(room-2)
    justEntered = true
    alarm[2] = 10
}

// Picking up paper:
if collision_circle(x,y,range,obj_paper,false,true) and keyboard_check(ord('Q'))
{
    hasPassword = true
    instance_destroy(obj_paper)
}

// Entering password:
if collision_circle(x,y,range,obj_computer,false,true) and keyboard_check(ord('Q')) and hasPassword
{
    room_goto(victory)
}

// Dying:
if collision_circle(x,y,hitboxRadius,obj_bulletenemy,true,true) and not sliding
{
    dead = instance_create(x,y,obj_playerdead)
    dead.image_angle = obj_bulletenemy.image_angle
    draw_sprite_stretched(spr_vision,0,-1,0-(windowX/16*3.5),windowX+1,windowX)
    instance_destroy()
}

// Screenshot:
if keyboard_check_pressed(ord('M'))
{
    screen_save(working_directory + 'screenshot.png')
}

if room == victory
{
    instance_destroy()
}

if keyboard_check(vk_escape)
{
    game_end()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha_test(true)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_color(c_white)
draw_set_font(font_large)

view_wport[0] = display_get_width()
view_hport[0] = display_get_height()

draw_text(64,windowY-64,string_format(ammo,0,0))

if reloading
{
    draw_set_color(c_white)
    draw_set_font(font_small)
    draw_text(64,windowY-22,'Reloading...')
}

draw_sprite(spr_ammoind,ammo,32,windowY-64)

if collision_point(x,y,obj_table,false,true)
{
    draw_set_font(font_small)
    draw_text(windowX/2,windowY/2+100,'[E] Enter vent')
}
if collision_point(x,y,obj_ventopen,false,true)
{
    draw_set_font(font_small)
    draw_text(windowX/2,windowY/2+100,'[E] Exit vent')
}
if collision_circle(x,y,range,obj_door,false,true)
{
    draw_set_font(font_small)
    draw_text(windowX/2,windowY/2+132,'[Q] Open/Close door')
}
if collision_circle(x,y,range,obj_elevatorup,false,true)
{
    draw_set_font(font_small)
    draw_text(windowX/2,windowY/2+132,'[Q] Go to next floor')
}
if collision_circle(x,y,range,obj_elevatordown,false,true)
{
    draw_set_font(font_small)
    draw_text(windowX/2,windowY/2+132,'[Q] Go to previous floor')
}

if hasPassword
{
    draw_sprite_stretched(spr_paper,0,96,windowY-96,64,64)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha_test(true)
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
